name: Test Coverage Report

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Yarn v4 (Berry)
        run: |
          corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests with coverage
        run: yarn unit:test:coverage

      - name: Post coverage report to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));

            const totalCoverage = coverage.total;
            const coverageMessage = `
            ## Test Coverage Report

            | Category | Coverage |
            |----------|----------|
            | Statements | ${totalCoverage.statements.pct}% |
            | Branches | ${totalCoverage.branches.pct}% |
            | Functions | ${totalCoverage.functions.pct}% |
            | Lines | ${totalCoverage.lines.pct}% |

            ### Coverage Details
            - Statements: ${totalCoverage.statements.covered}/${totalCoverage.statements.total}
            - Branches: ${totalCoverage.branches.covered}/${totalCoverage.branches.total}
            - Functions: ${totalCoverage.functions.covered}/${totalCoverage.functions.total}
            - Lines: ${totalCoverage.lines.covered}/${totalCoverage.lines.total}
            `;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const coverageComment = comments.find(comment => 
              comment.body.includes('## Test Coverage Report')
            );

            if (coverageComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: coverageComment.id,
                body: coverageMessage
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageMessage
              });
            }
